// BALANCED BST PROBLEM, SPOJ : ORDERSET

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define gc getchar_unlocked

inline int in()
   {int NR=0,sign=1;    char c=gc();
    while( c < 48 || c > 57 ){if(c=='-')sign=0; c=gc();}
    while(c>47 && c< 58)
    {    NR = (NR << 3) + (NR << 1) + (c - 48);    c=gc();    }
    return (sign?NR:(-NR));
}

struct Node
{
    int key;
    int lcnt;
    struct Node *left;
    struct Node *right;
    int height;
};

int height(struct Node *N)
{
    if (N == NULL)
        return 0;
    return N->height;
}
struct Node* newNode(int key)
{
    struct Node* node = (struct Node*)
                        malloc(sizeof(struct Node));
    node->key   = key;
    node->lcnt = 0;
    node->left   = NULL;
    node->right  = NULL;
    node->height = 1;  
    return(node);
}

struct Node *rightRotate(struct Node *y)
{
    struct Node *x = y->left;
    struct Node *T2 = x->right;
 
    // Perform rotation
    x->right = y;
    y->left = T2;
    y->lcnt -= (x->lcnt+1);
 	
    // Update heights
    y->height = max(height(y->left), height(y->right))+1;
    x->height = max(height(x->left), height(x->right))+1;
 
    // Return new root
    return x;
}
struct Node *leftRotate(struct Node *x)
{
    struct Node *y = x->right;
    struct Node *T2 = y->left;
 
    // Perform rotation
    y->left = x;
    x->right = T2;
 	y->lcnt += (x->lcnt+1);

    //  Update heights
    x->height = max(height(x->left), height(x->right))+1;
    y->height = max(height(y->left), height(y->right))+1;
 
    // Return new root
    return y;
}
int getBalance(struct Node *N)
{
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}
 
struct Node* insert(struct Node* node, int key)
{
    /* 1.  Perform the normal BST rotation */
    if (node == NULL)
        return(newNode(key));
 
    if (key < node->key){
    	node->lcnt++;
        node->left  = insert(node->left, key);
    }
    else if (key > node->key)
        node->right = insert(node->right, key);
    else 
        return node;
 
    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),
                           height(node->right));
 
    int balance = getBalance(node);
 
    // If this node becomes unbalanced, then there are 4 cases
 
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
 
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
 
    // Left Right Case
    if (balance > 1 && key > node->left->key)
    {
        node->left =  leftRotate(node->left);
        return rightRotate(node);
    }
 
    // Right Left Case
    if (balance < -1 && key < node->right->key)
    {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
 
    return node;
}
 
struct Node * minValueNode(struct Node* node)
{
    struct Node* current = node;
    while (current->left != NULL)
        current = current->left;
 
    return current;
}
 
struct Node* deleteNode(struct Node* root, int key)
{
    // STEP 1: PERFORM STANDARD BST DELETE
 
    if (root == NULL)
        return root;

    if ( key < root->key ){
    	root->lcnt--;
        root->left = deleteNode(root->left, key);
    }
 
    else if( key > root->key )
        root->right = deleteNode(root->right, key);
 
        else
    {
        // node with only one child or no child
        if( (root->left == NULL) || (root->right == NULL) )
        {
            struct Node *temp = root->left ? root->left :
                                             root->right;
 
            // No child case
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else // One child case
             *root = *temp; // Copy the contents of
                            // the non-empty child
            free(temp);
        }
        else
        {
            // node with two children: Get the inorder
            // successor (smallest in the right subtree)
            struct Node* temp = minValueNode(root->right);
 
            // Copy the inorder successor's data to this node
            root->key = temp->key;
 
            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->key);
        }
    }
 
    // If the tree had only one node then return
    if (root == NULL)
      return root;
 
    // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
    root->height = 1 + max(height(root->left),
                           height(root->right));
 
    // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to
    // check whether this node became unbalanced)
    int balance = getBalance(root);
 
    // If this node becomes unbalanced, then there are 4 cases
 
    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
 
    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0)
    {
        root->left =  leftRotate(root->left);
        return rightRotate(root);
    }
 
    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
 
    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0)
    {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
 
    return root;
}
 
int checkNode(int val, struct Node* root){
	if (root==NULL)
		return -1;

	if(root->key < val)
		return checkNode(val, root->right);
	else if(root->key > val)
		return checkNode(val, root->left);
	else 
		return 1;
} 

int query_count(struct Node* node, int x){		//number of elements smaller than x
	if(node == NULL)
		return 0;

	if(x < node->key)
		return query_count(node->left, x);
	if(x > node->key){
		return query_count(node->right, x)+node->lcnt+1;
	}
	return node->lcnt;
}

int k_smallest(struct Node *root, int k)
{
	if(root == NULL)
		return -(int)1e9;
     if(k == root->lcnt+1)
     	return root->key;
     
     if(k <= root->lcnt)
     	return k_smallest(root->left, k);

     return k_smallest(root->right, k-(root->lcnt+1));
}

int main()
{
	int q,param,num=0;
	char ch;
	q=in();
	struct Node* root = NULL;
	while(q--){
		scanf("%c",&ch);
		param = in();
		if(ch == 'I'){
			if(checkNode(param, root) == -1){
				root = insert(root, param);
				num++;
			}
			

		}else if(ch == 'D'){
			if(checkNode(param, root) == 1){
				root = deleteNode(root, param);
				num--;
			}

		}else if(ch == 'K'){
			if(param>num)
				printf("%s\n", "invalid");
			else{
				printf("%d\n", k_smallest(root, param));
			}
		}else{
			printf("%d\n", query_count(root, param));
		}
        //cout<<ch<<"  "<<param<<"  "<<root->key<<endl;
	}

	return 0;
}
