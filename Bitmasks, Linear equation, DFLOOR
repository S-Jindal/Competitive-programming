// spoj.com/problems/DFLOOR

#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define DO long double
#define pb push_back
#define pfr push_front
#define eb emplace_back
#define ef emplace_front
#define gc getchar
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define mp make_pair
#define vi vector<int>
#define vll vector<ll>
#define fr(i,j,k) for(i = j; i < k; i++)
#define bck(i,j,k) for(i = j; i > k; i--)

//////////////////////////////////////////////////////////////////////////////////////////
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) { }
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}
///////////////////////////////////////////////////////////////////////////////////////////


inline int in()  {
    int NR=0,sign=1;    char c=gc();
    while( c < 48 || c > 57 ){if(c=='-')sign=0; c=gc();}
    while(c>47 && c< 58)
    {    NR = (NR << 3) + (NR << 1) + (c - 48);    c=gc();    }
    return (sign?NR:(-NR));
}

pii ne[4]={mp(0,1), mp(1,0), mp(-1,0), mp(0,-1)};

const int mod = (int)1e9+7;
/////////////////////////////////////////////////////////////////////////////////////////

const int M = (1<<15)-1;
bool b[20][20];
bool ans[20][20];

int main(){

    int t, n, i, j, k, x, y;
    //t = in();
    while(1)
    {
        x = in();
        y = in();
        for(i = 0; i <= y+2; i++)
            for(j = 0; j <= x+2; j++)
                b[i][j] = ans[i][j] = 0;
        char *s;
        for(i=1; i <= y; i++)
        {
            scanf("%s", s);
            for(j=0; j<x; j++)
                b[i][j+1] = s[j]-'0';
        }

        for(int mask = 0; mask < (1<<x); mask++)
        {
            for(j = 1; j <= x; j++)
                if(mask & (1<<(j-1)))
                    ans[1][j] = 1;
                else
                    ans[1][j] = 0;

            for(i = 2; i <= y; i++){
                // Iterate row wise
                for(j = 1; j <= x; j++){

                     k = ans[i-1][j] + ans[i-1][j-1] + ans[i-1][j+1] + ans[i-2][j];
                     k = k%2;
                     if(b[i-1][j])
                        ans[i][j] = k;
                     else
                        ans[i][j] = 1-k;

                }
            }
            // check for correctness
            bool is = 1;
            for(j = 1; j <= x; j++){
                k = ans[y][j] + ans[y][j-1] + ans[y][j+1] + ans[y-1][j];
                k %= 2;
                if(b[y][j] != (1 - k))
                {
                    is = 0;
                    break;
                }
            }

            if(is){
                k = 0;  // count number of 1's
                for(i=1; i<=y; i++) for(j=1; j<=x; j++) k += ans[i][j];
                printf("%d\n", k);
                for(i=1; i<=y; i++) for(j=1; j<=x; j++) if(ans[i][j]) printf("%d %d\n", j, i);

                break;
            }

        }


    }

    return 0;
}
